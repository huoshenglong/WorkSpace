<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
        "http://struts.apache.org/dtds/struts-2.3.dtd">
<!-- 上面的头，注意版本，从样例里复制过来 showcase.war\WEB-INF\src\java\struts.xml -->

<struts>
    <!-- 告知Struts2运行时使用Spring来创建对象 -->
    <constant name="struts.objectFactory" value="spring"/>

    <!--<constant name="struts.convention.package.locators" value="controller"/>-->
    <!-- 自动扫描action包 -->
    <!-- 注解需要的jar包：struts2-convention-plugin -->
    <!--<constant name="struts.convention.default.parent.package" value="default"/>-->
    <!--<constant name="struts.convention.package.locators.basePackage" value="com.zsm.ssh.action" />-->
    <!--<constant name="struts.convention.package.locators" value="action"/>-->
    <!--<constant name="struts.conventresultJsonsult.path" value="/WEB-INF/jsp/"/>-->
    <!--<constant name="struts.convention.classes.reload" value="true"/>-->
    <constant name="struts.i18n.encoding" value="utf-8" />
    <!--<constant name="struts.enable.DynamicMethodInvocation" value="true"/>-->

    <!-- 第1步：先定义一个包 namespace="/login"用于区别不同Action，需要添加到url中 采用注解不需配置-->
    <!--<package name="default" extends="struts-default">
        &lt;!&ndash; 第2步：定义一个action，配置跳转信息 name 类似于Servlet @WebServlet("/IndexServlet")
      http://xxxx/xxx/Index.action http://xxxx/xxx/Index class 对应于自己写的Action类 当不写method属性时，默认调用的是execute
      class="com.zsm.ssh.action.UserAction" ** new com.zsm.ssh.action.UserAction()
      设计思想：关心了具体的实现类必须改为不要关注那个实现类 加入spring后，struts的action节点的class属性意义发生变化，
      直接引用spring帮忙创建的实例  &ndash;&gt;
        <action name="login" class="com.zsm.ssh.action.UserAction">
            &lt;!&ndash; 跳转是forward/WEB-INF/是防止jsp不经过action就可以访问&ndash;&gt;
            &lt;!&ndash; result接收返回的字符串，然后做对应的事情 &ndash;&gt;
            &lt;!&ndash; 跳转是forward/WEB-INF/是防止jsp不经过action就可以访问&ndash;&gt;
            &lt;!&ndash; result接收返回的字符串，然后做对应的事情 &ndash;&gt;
         resultJsonsult name="index" type="json">/index.jresultJsonsult>
         resultJsonsult name="success" type="json">/success.jresultJsonsult>
         resultJsonsult name="error">/error.jresultJsonsult>
        </action>
    </package>-->

    <!-- 所有匹配*.action的请求都由struts2处理 -->
    <constant name="struts.action.extension" value="action"/>
    <!-- 是否启用开发模式 -->
    <constant name="struts.devMode" value="true"/>
    <!-- struts配置文件改动后，是否重新加载 -->
    <constant name="struts.configuration.xml.reload" value="true"/>
    <!-- 设置浏览器是否缓存静态内容 -->
    <constant name="struts.serve.static.browserCache" value="false"/>
    <!-- 请求参数的编码方式 -->
    <constant name="struts.i18n.encoding" value="utf-8"/>
    <!-- 每次HTTP请求系统都重新加载资源文件，有助于开发 -->
    <constant name="struts.i18n.reload" value="true"/>
    <!-- 文件上传最大值 -->
    <constant name="struts.multipart.maxSize" value="104857600"/>
    <!-- 让struts2支持动态方法调用 -->
    <constant name="struts.enable.DynamicMethodInvocation" value="true"/>
    <!-- Action名称中是否还是用斜线 -->
    <constant name="struts.enable.SlashesInActionNames" value="false"/>
    <!-- 允许标签中使用表达式语法 -->
    <constant name="struts.tag.altSyntax" value="true"/>
    <!-- 对于WebLogic,Orion,OC4J此属性应该设置成true -->
    <constant name="struts.dispatcher.parametersWorkaround" value="false"/>
    <package name="basePackage" extends="struts-default"/>
</struts>
